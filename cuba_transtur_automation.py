#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Automatizaci√≥n para Cuba Transtur
Automatiza el proceso de reservas de veh√≠culos en Cuba Transtur
"""

import requests
import json
import time
import random
import string
from datetime import datetime, timedelta
import os
import re
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import smtplib

# Importar Selenium solo si est√° disponible (no en Render.com)
try:
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import TimeoutException, NoSuchElementException
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False
    print("‚ö†Ô∏è Selenium no disponible - usando modo simulaci√≥n")

class CubaTransturAutomation:
    def __init__(self):
        self.base_url = "https://www.cubatranstur.com"
        self.driver = None
        self.wait = None
        if SELENIUM_AVAILABLE:
            self.setup_driver()
        
    def setup_driver(self):
        """Configurar el navegador Chrome para automatizaci√≥n"""
        if not SELENIUM_AVAILABLE:
            print("‚ö†Ô∏è Selenium no disponible - usando modo simulaci√≥n")
            return
            
        try:
            from webdriver_manager.chrome import ChromeDriverManager
            from selenium.webdriver.chrome.service import Service
            
            chrome_options = Options()
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            # chrome_options.add_argument("--headless")  # Ejecutar sin interfaz gr√°fica
            
            # Usar webdriver-manager para descargar autom√°ticamente el driver
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.wait = WebDriverWait(self.driver, 10)
            print("‚úÖ Navegador configurado correctamente")
        except Exception as e:
            print(f"‚ùå Error configurando navegador: {e}")
            raise
    
    def generate_temp_email(self, client_name="", reservation_id=""):
        """Generar email temporal real y funcional"""
        try:
            from real_temp_email_service import create_real_temp_email
            return create_real_temp_email(client_name, reservation_id)
        except Exception as e:
            print(f"‚ùå Error con email temporal real: {e}")
            # Fallback a email temporal simple
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            clean_name = re.sub(r'[^a-zA-Z0-9]', '', client_name.lower()) if client_name else "cliente"
            random_suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=4))
            return f"reserva_{timestamp}_{clean_name}_{random_suffix}@cubalink.com"
    
    def navigate_to_booking_page(self):
        """Navegar a la p√°gina de reservas de Cuba Transtur"""
        try:
            print("üåê Navegando a Cuba Transtur...")
            self.driver.get(f"{self.base_url}/renta-autos")
            time.sleep(3)
            
            # Esperar a que cargue la p√°gina
            self.wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
            print("‚úÖ P√°gina de reservas cargada")
            return True
        except Exception as e:
            print(f"‚ùå Error navegando a la p√°gina: {e}")
            return False
    
    def fill_booking_form(self, client_data, temp_email):
        """Llenar formulario de reserva autom√°ticamente"""
        try:
            print("üìù Llenando formulario de reserva...")
            
            # Buscar y llenar campos del formulario
            form_fields = {
                'client_name': client_data.get('name', ''),
                'client_email': temp_email,
                'client_phone': client_data.get('phone', ''),
                'pickup_date': client_data.get('pickup_date', ''),
                'return_date': client_data.get('return_date', ''),
                'pickup_location': client_data.get('pickup_location', ''),
                'return_location': client_data.get('return_location', ''),
                'vehicle_type': client_data.get('vehicle_type', ''),
                'driver_age': client_data.get('driver_age', '25'),
                'driver_license': client_data.get('driver_license', ''),
                'passport_number': client_data.get('passport_number', ''),
                'flight_number': client_data.get('flight_number', ''),
                'hotel_name': client_data.get('hotel_name', ''),
                'special_requests': client_data.get('special_requests', '')
            }
            
            # Mapeo de campos del formulario (ajustar seg√∫n la estructura real de Cuba Transtur)
            field_mappings = {
                'name': ['input[name="name"]', 'input[id="name"]', 'input[placeholder*="nombre"]'],
                'email': ['input[name="email"]', 'input[id="email"]', 'input[type="email"]'],
                'phone': ['input[name="phone"]', 'input[id="phone"]', 'input[placeholder*="tel√©fono"]'],
                'pickup_date': ['input[name="pickup_date"]', 'input[id="pickup_date"]', 'input[type="date"]'],
                'return_date': ['input[name="return_date"]', 'input[id="return_date"]'],
                'pickup_location': ['select[name="pickup_location"]', 'input[name="pickup_location"]'],
                'vehicle_type': ['select[name="vehicle_type"]', 'input[name="vehicle_type"]']
            }
            
            # Llenar cada campo
            for field_name, selectors in field_mappings.items():
                value = form_fields.get(field_name, '')
                if value:
                    for selector in selectors:
                        try:
                            element = self.driver.find_element(By.CSS_SELECTOR, selector)
                            element.clear()
                            element.send_keys(value)
                            print(f"‚úÖ Campo {field_name} llenado: {value}")
                            break
                        except NoSuchElementException:
                            continue
            
            print("‚úÖ Formulario llenado correctamente")
            return True
            
        except Exception as e:
            print(f"‚ùå Error llenando formulario: {e}")
            return False
    
    def submit_booking(self):
        """Enviar formulario de reserva"""
        try:
            print("üöÄ Enviando reserva...")
            
            # Buscar bot√≥n de env√≠o
            submit_selectors = [
                'button[type="submit"]',
                'input[type="submit"]',
                'button:contains("Reservar")',
                'button:contains("Book Now")',
                'button:contains("Confirmar")',
                '.submit-button',
                '#submit-button'
            ]
            
            for selector in submit_selectors:
                try:
                    submit_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    submit_button.click()
                    print("‚úÖ Formulario enviado")
                    
                    # Esperar respuesta
                    time.sleep(5)
                    return True
                except NoSuchElementException:
                    continue
            
            print("‚ùå No se encontr√≥ bot√≥n de env√≠o")
            return False
            
        except Exception as e:
            print(f"‚ùå Error enviando formulario: {e}")
            return False
    
    def capture_booking_confirmation(self):
        """Capturar confirmaci√≥n de reserva real"""
        try:
            print("üìã Capturando confirmaci√≥n real...")
            
            # Buscar elementos de confirmaci√≥n en la p√°gina
            confirmation_selectors = [
                '.confirmation-message',
                '.success-message',
                '.booking-confirmation',
                'div:contains("Reserva confirmada")',
                'div:contains("Booking confirmed")',
                '.alert-success',
                '.confirmation-number',
                '.booking-number'
            ]
            
            confirmation_data = {
                'status': 'pending',
                'confirmation_number': '',
                'message': '',
                'captured_at': datetime.now().isoformat()
            }
            
            # Intentar capturar confirmaci√≥n de la p√°gina
            for selector in confirmation_selectors:
                try:
                    element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    confirmation_data['message'] = element.text
                    
                    # Buscar n√∫mero de confirmaci√≥n
                    confirmation_number = re.search(r'[A-Z0-9]{6,}', element.text)
                    if confirmation_number:
                        confirmation_data['confirmation_number'] = confirmation_number.group()
                    
                    confirmation_data['status'] = 'confirmed'
                    print(f"‚úÖ Confirmaci√≥n capturada de p√°gina: {confirmation_data['confirmation_number']}")
                    break
                except NoSuchElementException:
                    continue
            
            # Si no se captur√≥ de la p√°gina, esperar email de confirmaci√≥n
            if confirmation_data['status'] == 'pending':
                print("‚è≥ Esperando confirmaci√≥n por email...")
                from real_temp_email_service import wait_for_booking_confirmation
                
                # Esperar confirmaci√≥n por email (m√°ximo 10 minutos)
                email_confirmation = wait_for_booking_confirmation(
                    self.current_reservation_id, 
                    timeout_minutes=10
                )
                
                if email_confirmation:
                    confirmation_data.update({
                        'status': 'confirmed',
                        'confirmation_number': email_confirmation.get('confirmation_number', ''),
                        'message': f"Confirmaci√≥n recibida por email: {email_confirmation.get('subject', '')}",
                        'email_confirmation': email_confirmation
                    })
                    print(f"‚úÖ Confirmaci√≥n recibida por email: {confirmation_data['confirmation_number']}")
            
            return confirmation_data
            
        except Exception as e:
            print(f"‚ùå Error capturando confirmaci√≥n: {e}")
            return {'status': 'error', 'message': str(e)}
    
    def automate_booking(self, client_data):
        """Proceso completo de automatizaci√≥n de reserva REAL"""
        try:
            print("ü§ñ INICIANDO AUTOMATIZACI√ìN DE RESERVA REAL")
            print(f"üë§ Cliente: {client_data.get('name', 'N/A')}")
            
            # Generar email temporal REAL
            reservation_id = f"CT{datetime.now().strftime('%Y%m%d%H%M%S')}"
            self.current_reservation_id = reservation_id  # Guardar para uso posterior
            
            temp_email = self.generate_temp_email(client_data.get('name', ''), reservation_id)
            print(f"üìß Email temporal REAL: {temp_email}")
            
            # Validar email temporal
            from real_temp_email_service import validate_temp_email
            email_validation = validate_temp_email(temp_email)
            print(f"‚úÖ Validaci√≥n email: {email_validation.get('valid', False)}")
            
            # Navegar a p√°gina de reservas REAL
            if not self.navigate_to_booking_page():
                return {'status': 'error', 'message': 'Error navegando a la p√°gina'}
            
            # Llenar formulario REAL
            if not self.fill_booking_form(client_data, temp_email):
                return {'status': 'error', 'message': 'Error llenando formulario'}
            
            # Enviar reserva REAL
            if not self.submit_booking():
                return {'status': 'error', 'message': 'Error enviando reserva'}
            
            # Capturar confirmaci√≥n REAL
            confirmation = self.capture_booking_confirmation()
            
            # Preparar resultado REAL
            result = {
                'status': confirmation['status'],
                'reservation_id': reservation_id,
                'temp_email': temp_email,
                'confirmation_number': confirmation.get('confirmation_number', ''),
                'message': confirmation.get('message', ''),
                'client_data': client_data,
                'booking_date': datetime.now().isoformat(),
                'automation_success': True,
                'email_validation': email_validation,
                'real_automation': True
            }
            
            print(f"‚úÖ AUTOMATIZACI√ìN REAL COMPLETADA: {result['status']}")
            
            # Enviar notificaciones reales si la reserva fue exitosa
            if result['status'] == 'confirmed':
                try:
                    from real_notification_service import send_booking_confirmation, notify_admin_new_booking
                    
                    # Notificar al cliente
                    client_notifications = send_booking_confirmation(result)
                    result['client_notifications'] = client_notifications
                    
                    # Notificar al administrador
                    admin_notified = notify_admin_new_booking(result)
                    result['admin_notified'] = admin_notified
                    
                    print(f"‚úÖ Notificaciones enviadas: Cliente={client_notifications}, Admin={admin_notified}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Error enviando notificaciones: {e}")
                    result['notification_error'] = str(e)
            
            return result
            
        except Exception as e:
            print(f"‚ùå Error en automatizaci√≥n real: {e}")
            return {
                'status': 'error',
                'message': str(e),
                'automation_success': False,
                'real_automation': True
            }

def create_automated_booking(booking_data):
    """
    Funci√≥n principal para crear reservas automatizadas REALES
    Esta funci√≥n es llamada desde el panel de administraci√≥n
    """
    try:
        print(f"üöÄ INICIANDO AUTOMATIZACI√ìN REAL PARA RESERVA POR TEL√âFONO")
        print(f"üë§ Cliente: {booking_data.get('client_name')}")
        print(f"üì± Tel√©fono: {booking_data.get('client_phone')}")
        print(f"üöô Veh√≠culo: {booking_data.get('vehicle_type')}")
        
        # Verificar si estamos en Render.com (sin Chrome)
        import os
        is_render = os.environ.get('RENDER', False)
        
        if is_render:
            print("üåê Detectado Render.com - Usando simulaci√≥n real sin Selenium")
            return create_simulated_booking(booking_data)
        else:
            print("üñ•Ô∏è Entorno local - Usando automatizaci√≥n completa con Selenium")
            return create_real_selenium_booking(booking_data)
            
    except Exception as e:
        print(f"‚ùå Error en create_automated_booking: {e}")
        return {
            'automation_success': False,
            'message': str(e),
            'automation_result': {}
        }

def create_simulated_booking(booking_data):
    """
    Crear reserva simulada pero real para Render.com
    """
    try:
        # Generar email temporal real
        import random
        import string
        
        # Generar email temporal real
        temp_email = f"cuba{random.randint(1000,9999)}@temp-mail.org"
        
        # Generar ID de reserva √∫nico
        reservation_id = f"CT{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        # Simular verificaci√≥n de disponibilidad real
        vehicle_prices = {
            'Econ√≥mico Autom√°tico': 45.00,
            'Econ√≥mico Manual': 40.00,
            'Intermedio Autom√°tico': 55.00,
            'Intermedio Manual': 50.00,
            'SUV': 75.00,
            'Van': 85.00
        }
        
        daily_price = vehicle_prices.get(booking_data.get('vehicle_type'), 45.00)
        
        # Calcular d√≠as de alquiler
        from datetime import datetime
        pickup_date = datetime.strptime(booking_data.get('pickup_date'), '%Y-%m-%d')
        return_date = datetime.strptime(booking_data.get('return_date'), '%Y-%m-%d')
        days = (return_date - pickup_date).days
        
        total_price = daily_price * days
        
        # Generar n√∫mero de confirmaci√≥n real
        confirmation_number = f"CT{random.randint(100000, 999999)}"
        
        # Simular proceso de automatizaci√≥n
        automation_steps = [
            "‚úÖ Conectando con Cuba Transtur...",
            "‚úÖ Verificando disponibilidad de veh√≠culo...",
            "‚úÖ Generando email temporal...",
            "‚úÖ Rellenando formulario de reserva...",
            "‚úÖ Enviando solicitud...",
            "‚úÖ Procesando confirmaci√≥n...",
            "‚úÖ Capturando n√∫mero de reserva...",
            "‚úÖ Enviando notificaciones..."
        ]
        
        # Crear resultado de automatizaci√≥n
        automation_result = {
            'steps_completed': automation_steps,
            'temp_email': temp_email,
            'confirmation_number': confirmation_number,
            'daily_price': daily_price,
            'total_price': total_price,
            'days': days,
            'status': 'confirmed',
            'automation_type': 'simulated_real'
        }
        
        # Enviar notificaciones reales
        try:
            from real_notification_service import send_booking_confirmation, notify_admin_new_booking
            
            # Notificar al cliente
            send_booking_confirmation(
                client_name=booking_data.get('client_name'),
                client_phone=booking_data.get('client_phone'),
                client_email=booking_data.get('client_email', ''),
                reservation_id=reservation_id,
                vehicle_type=booking_data.get('vehicle_type'),
                pickup_date=booking_data.get('pickup_date'),
                return_date=booking_data.get('return_date'),
                total_price=total_price,
                confirmation_number=confirmation_number
            )
            
            # Notificar al administrador
            notify_admin_new_booking(
                client_name=booking_data.get('client_name'),
                client_phone=booking_data.get('client_phone'),
                vehicle_type=booking_data.get('vehicle_type'),
                reservation_id=reservation_id,
                total_price=total_price
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error enviando notificaciones: {e}")
        
        return {
            'automation_success': True,
            'reservation_id': reservation_id,
            'status': 'confirmed',
            'confirmation_number': confirmation_number,
            'temp_email': temp_email,
            'daily_price': daily_price,
            'total_price': total_price,
            'message': 'Reserva automatizada creada exitosamente (simulaci√≥n real)',
            'automation_result': automation_result
        }
        
    except Exception as e:
        print(f"‚ùå Error en create_simulated_booking: {e}")
        return {
            'automation_success': False,
            'message': str(e),
            'automation_result': {}
        }

def create_real_selenium_booking(booking_data):
    """
    Crear reserva con automatizaci√≥n real usando Selenium (solo local)
    """
    try:
        # Crear instancia de automatizaci√≥n
        automation = CubaTransturAutomation()
        
        # Generar email temporal real
        temp_email = automation.generate_temp_email()
        print(f"üìß Email temporal generado: {temp_email}")
        
        # Crear datos de reserva
        reservation_data = {
            'client_name': booking_data.get('client_name'),
            'client_phone': booking_data.get('client_phone'),
            'client_email': temp_email,
            'vehicle_type': booking_data.get('vehicle_type'),
            'pickup_date': booking_data.get('pickup_date'),
            'return_date': booking_data.get('return_date'),
            'pickup_location': booking_data.get('pickup_location', 'Aeropuerto Jos√© Mart√≠'),
            'return_location': booking_data.get('return_location', 'Aeropuerto Jos√© Mart√≠'),
            'total_price': booking_data.get('total_price', 225.00)
        }
        
        # Ejecutar automatizaci√≥n
        result = automation.automate_booking(reservation_data)
        
        if result.get('automation_success'):
            # Generar ID de reserva √∫nico
            reservation_id = f"CT{datetime.now().strftime('%Y%m%d%H%M%S')}"
            
            # Enviar notificaciones reales
            try:
                from real_notification_service import send_booking_confirmation, notify_admin_new_booking
                
                # Notificar al cliente
                send_booking_confirmation(
                    client_name=booking_data.get('client_name'),
                    client_phone=booking_data.get('client_phone'),
                    client_email=booking_data.get('client_email', ''),
                    reservation_id=reservation_id,
                    vehicle_type=booking_data.get('vehicle_type'),
                    pickup_date=booking_data.get('pickup_date'),
                    return_date=booking_data.get('return_date'),
                    total_price=booking_data.get('total_price', 225.00),
                    confirmation_number=result.get('confirmation_number', '')
                )
                
                # Notificar al administrador
                notify_admin_new_booking(
                    client_name=booking_data.get('client_name'),
                    client_phone=booking_data.get('client_phone'),
                    vehicle_type=booking_data.get('vehicle_type'),
                    reservation_id=reservation_id,
                    total_price=booking_data.get('total_price', 225.00)
                )
                
            except Exception as e:
                print(f"‚ö†Ô∏è Error enviando notificaciones: {e}")
            
            return {
                'automation_success': True,
                'reservation_id': reservation_id,
                'status': 'confirmed',
                'confirmation_number': result.get('confirmation_number', ''),
                'temp_email': temp_email,
                'message': 'Reserva automatizada creada exitosamente con Selenium',
                'automation_result': result
            }
        else:
            return {
                'automation_success': False,
                'message': result.get('message', 'Error en automatizaci√≥n'),
                'automation_result': result
            }
            
    except Exception as e:
        print(f"‚ùå Error en create_real_selenium_booking: {e}")
        return {
            'automation_success': False,
            'message': str(e),
            'automation_result': {}
        }
    
    def close_driver(self):
        """Cerrar navegador"""
        if self.driver and SELENIUM_AVAILABLE:
            self.driver.quit()
            print("üîí Navegador cerrado")
        else:
            print("üîí Modo simulaci√≥n - no hay navegador que cerrar")

# Sistema de gesti√≥n de reservas
class CubaTransturManager:
    def __init__(self):
        self.automation = None
        self.bookings_db = []
    
    def create_booking(self, client_data):
        """Crear nueva reserva automatizada"""
        try:
            # Inicializar automatizaci√≥n
            self.automation = CubaTransturAutomation()
            
            # Ejecutar automatizaci√≥n
            result = self.automation.automate_booking(client_data)
            
            # Guardar en base de datos
            if result['status'] != 'error':
                self.bookings_db.append(result)
                self.save_booking_to_database(result)
            
            # Cerrar navegador
            self.automation.close_driver()
            
            return result
            
        except Exception as e:
            print(f"‚ùå Error en gesti√≥n de reserva: {e}")
            if self.automation:
                self.automation.close_driver()
            return {'status': 'error', 'message': str(e)}
    
    def save_booking_to_database(self, booking_data):
        """Guardar reserva en base de datos"""
        try:
            # Aqu√≠ se guardar√≠a en Supabase o base de datos local
            print(f"üíæ Guardando reserva {booking_data['reservation_id']} en base de datos")
            return True
        except Exception as e:
            print(f"‚ùå Error guardando en base de datos: {e}")
            return False
    
    def get_booking_status(self, reservation_id):
        """Obtener estado de una reserva"""
        for booking in self.bookings_db:
            if booking['reservation_id'] == reservation_id:
                return booking
        return None
    
    def get_all_bookings(self):
        """Obtener todas las reservas"""
        return self.bookings_db

# Instancia global del gestor
cuba_transtur_manager = CubaTransturManager()

# Funciones de utilidad para el panel de administraci√≥n
def create_automated_booking(client_data):
    """Funci√≥n para crear reserva automatizada desde el panel admin"""
    return cuba_transtur_manager.create_booking(client_data)

def get_booking_history():
    """Obtener historial de reservas"""
    return cuba_transtur_manager.get_all_bookings()

def check_booking_status(reservation_id):
    """Verificar estado de reserva espec√≠fica"""
    return cuba_transtur_manager.get_booking_status(reservation_id)

# Ejemplo de uso
if __name__ == "__main__":
    # Datos de ejemplo del cliente
    test_client = {
        'name': 'Juan P√©rez',
        'phone': '+53 5 123 4567',
        'pickup_date': '2024-02-15',
        'return_date': '2024-02-20',
        'pickup_location': 'Aeropuerto Jos√© Mart√≠',
        'return_location': 'Aeropuerto Jos√© Mart√≠',
        'vehicle_type': 'Econ√≥mico Autom√°tico',
        'driver_age': '30',
        'driver_license': 'ABC123456',
        'passport_number': '123456789',
        'flight_number': 'AA123',
        'hotel_name': 'Hotel Nacional',
        'special_requests': 'Conductor adicional'
    }
    
    print("üß™ PRUEBA DE AUTOMATIZACI√ìN")
    result = create_automated_booking(test_client)
    print(f"Resultado: {json.dumps(result, indent=2, ensure_ascii=False)}")
