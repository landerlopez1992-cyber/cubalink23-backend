#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de prueba para funcionalidades de subida de imagenes y categorias de vehiculos
"""

import requests
import json
import os
from datetime import datetime

# Configuraci√≥n
BASE_URL = "http://localhost:3005"
ADMIN_EMAIL = "landerlopez1992@gmail.com"
ADMIN_PASSWORD = "Maquina.2055"

def login_admin():
    """Iniciar sesi√≥n como administrador"""
    try:
        session = requests.Session()
        response = session.post(f"{BASE_URL}/auth/login", data={
            'username': ADMIN_EMAIL,
            'password': ADMIN_PASSWORD
        })
        
        if response.status_code in [200, 302]:  # Login exitoso
            print("‚úÖ Login exitoso")
            return session  # Retornamos la sesi√≥n con cookies
        else:
            print(f"‚ùå Error HTTP en login: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n en login: {e}")
        return None

def test_vehicle_categories(session):
    """Probar obtenci√≥n de categor√≠as de veh√≠culos"""
    try:
        response = session.get(f"{BASE_URL}/admin/api/vehicles/categories")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                categories = data.get('categories', [])
                print(f"‚úÖ Categor√≠as obtenidas: {len(categories)} categor√≠as")
                
                for category in categories:
                    print(f"  - {category['name']}: {category['description']}")
                    print(f"    Rango de precio: {category['daily_rate_range']}")
                    print(f"    Asientos: {category['seats']}")
                    print(f"    Ejemplos: {', '.join(category['examples'])}")
                    print()
                
                return categories
            else:
                print(f"‚ùå Error al obtener categor√≠as: {data.get('error')}")
                return None
        else:
            print(f"‚ùå Error HTTP al obtener categor√≠as: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n al obtener categor√≠as: {e}")
        return None

def test_vehicle_category_detail(session, category_id):
    """Probar obtenci√≥n de detalles de una categor√≠a espec√≠fica"""
    try:
        response = session.get(f"{BASE_URL}/admin/api/vehicles/categories/{category_id}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                category = data.get('category')
                print(f"‚úÖ Detalles de categor√≠a '{category['name']}' obtenidos")
                print(f"  Descripci√≥n: {category['description']}")
                print(f"  Caracter√≠sticas: {', '.join(category['features'])}")
                return category
            else:
                print(f"‚ùå Error al obtener detalles de categor√≠a: {data.get('error')}")
                return None
        else:
            print(f"‚ùå Error HTTP al obtener detalles de categor√≠a: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n al obtener detalles de categor√≠a: {e}")
        return None

def test_create_vehicle_with_category(session, category_id):
    """Probar creaci√≥n de veh√≠culo con categor√≠a"""
    try:
        
        vehicle_data = {
            'license_plate': 'ABC123',
            'brand': 'Toyota',
            'model': 'Corolla',
            'year': 2022,
            'color': 'Blanco',
            'vehicle_type': 'sedan',
            'transmission': 'autom√°tico',
            'fuel_type': 'gasolina',
            'seats': 5,
            'daily_rate': 45.00,
            'location': 'La Habana',
            'category_id': category_id,
            'description': 'Veh√≠culo en excelente estado, ideal para viajes de negocios',
            'features': ['Aire acondicionado', 'GPS', 'Bluetooth', 'C√°mara de reversa'],
            'insurance_cost': 15.00,
            'deposit_amount': 200.00
        }
        
        response = session.post(f"{BASE_URL}/admin/api/vehicles/create-with-category", 
                               json=vehicle_data)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                vehicle_id = data.get('vehicle_id')
                print(f"‚úÖ Veh√≠culo creado exitosamente con ID: {vehicle_id}")
                return vehicle_id
            else:
                print(f"‚ùå Error al crear veh√≠culo: {data.get('error')}")
                return None
        else:
            print(f"‚ùå Error HTTP al crear veh√≠culo: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n al crear veh√≠culo: {e}")
        return None

def test_upload_vehicle_images(session, vehicle_id):
    """Probar subida de im√°genes de veh√≠culo"""
    try:
        
        # Crear archivos de prueba (simulando im√°genes)
        test_images = []
        for i in range(3):
            image_path = f"test_image_{i}.jpg"
            with open(image_path, 'w') as f:
                f.write(f"Test image content {i}")
            test_images.append(image_path)
        
        # Preparar datos para subida
        files = []
        for image_path in test_images:
            with open(image_path, 'rb') as f:
                files.append(('images', (image_path, f.read(), 'image/jpeg')))
        
        data = {'vehicle_id': str(vehicle_id)}
        
        response = session.post(f"{BASE_URL}/admin/api/vehicles/upload-images", 
                               files=files, data=data)
        
        # Limpiar archivos de prueba
        for image_path in test_images:
            if os.path.exists(image_path):
                os.remove(image_path)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                images = data.get('images', [])
                print(f"‚úÖ {len(images)} im√°genes subidas exitosamente")
                for image_url in images:
                    print(f"  - {image_url}")
                return images
            else:
                print(f"‚ùå Error al subir im√°genes: {data.get('error')}")
                return None
        else:
            print(f"‚ùå Error HTTP al subir im√°genes: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n al subir im√°genes: {e}")
        return None

def test_delete_vehicle_image(session, vehicle_id, image_url):
    """Probar eliminaci√≥n de imagen de veh√≠culo"""
    try:
        
        data = {'image_url': image_url}
        
        response = session.delete(f"{BASE_URL}/admin/api/vehicles/{vehicle_id}/images", 
                                 json=data)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print(f"‚úÖ Imagen eliminada exitosamente: {image_url}")
                return True
            else:
                print(f"‚ùå Error al eliminar imagen: {data.get('error')}")
                return False
        else:
            print(f"‚ùå Error HTTP al eliminar imagen: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n al eliminar imagen: {e}")
        return False

def test_get_vehicles(session):
    """Probar obtenci√≥n de veh√≠culos"""
    try:
        response = session.get(f"{BASE_URL}/admin/api/vehicles")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                vehicles = data.get('vehicles', [])
                print(f"‚úÖ Veh√≠culos obtenidos: {len(vehicles)} veh√≠culos")
                
                for vehicle in vehicles:
                    print(f"  - {vehicle['brand']} {vehicle['model']} ({vehicle['license_plate']})")
                    print(f"    Categor√≠a: {vehicle.get('category_id', 'N/A')}")
                    print(f"    Precio por d√≠a: ${vehicle['daily_rate']}")
                    print(f"    Estado: {vehicle['status']}")
                    print()
                
                return vehicles
            else:
                print(f"‚ùå Error al obtener veh√≠culos: {data.get('error')}")
                return None
        else:
            print(f"‚ùå Error HTTP al obtener veh√≠culos: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n al obtener veh√≠culos: {e}")
        return None

def main():
    """Funci√≥n principal de prueba"""
    print("üöó PRUEBAS DE SISTEMA DE VEH√çCULOS CON IM√ÅGENES Y CATEGOR√çAS")
    print("=" * 60)
    
    # 1. Login
    session = login_admin()
    if not session:
        print("‚ùå No se pudo obtener sesi√≥n. Abortando pruebas.")
        return
    
    print("\n" + "=" * 60)
    
    # 2. Probar categor√≠as
    print("üìã PROBANDO CATEGOR√çAS DE VEH√çCULOS")
    categories = test_vehicle_categories(session)
    if not categories:
        print("‚ùå No se pudieron obtener categor√≠as. Abortando pruebas.")
        return
    
    print("\n" + "=" * 60)
    
    # 3. Probar detalles de categor√≠a
    print("üîç PROBANDO DETALLES DE CATEGOR√çA")
    category_id = categories[0]['id']  # Usar la primera categor√≠a
    category_detail = test_vehicle_category_detail(session, category_id)
    if not category_detail:
        print("‚ùå No se pudieron obtener detalles de categor√≠a.")
    
    print("\n" + "=" * 60)
    
    # 4. Probar creaci√≥n de veh√≠culo con categor√≠a
    print("üöô PROBANDO CREACI√ìN DE VEH√çCULO CON CATEGOR√çA")
    vehicle_id = test_create_vehicle_with_category(session, category_id)
    if not vehicle_id:
        print("‚ùå No se pudo crear veh√≠culo. Continuando con otras pruebas.")
    
    print("\n" + "=" * 60)
    
    # 5. Probar subida de im√°genes (solo si se cre√≥ el veh√≠culo)
    if vehicle_id:
        print("üì∏ PROBANDO SUBIDA DE IM√ÅGENES")
        uploaded_images = test_upload_vehicle_images(session, vehicle_id)
        
        if uploaded_images:
            print("\n" + "=" * 60)
            print("üóëÔ∏è PROBANDO ELIMINACI√ìN DE IM√ÅGENES")
            # Probar eliminar la primera imagen
            test_delete_vehicle_image(session, vehicle_id, uploaded_images[0])
    
    print("\n" + "=" * 60)
    
    # 6. Probar obtenci√≥n de veh√≠culos
    print("üìã PROBANDO OBTENCI√ìN DE VEH√çCULOS")
    vehicles = test_get_vehicles(session)
    
    print("\n" + "=" * 60)
    print("‚úÖ PRUEBAS COMPLETADAS")
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
